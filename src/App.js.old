import React, { useState } from 'react';
import logo from './logo.svg';
import './App.css';

function App() {
  const [bleAvaliable, setBleAvaliable] = useState(false);
  const [gattServer, setGattServer] = useState(null);
  const [device, setDevice] = useState(null);
  const [connected, setConnected] = useState(false);

  const isBLEAvaliable = () => {
    navigator.bluetooth.getAvailability()
    .then(isBluetoothAvailable => setBleAvaliable(isBluetoothAvailable));
  }

  const bleScan = () => {
    const options = {
      // "filters": [{
      //   "name": "BLUFI_DEVICE"
      // }],
      acceptAllDevices: true,
      // optionalServices: ['generic_access']
      optionalServices: [blufiServiceUUID]
    };
    // console.log(navigator.bluetooth);
    const device = navigator.bluetooth.requestDevice(options);
    return device.then((device)=>{
      console.log("BLE Scan: ", device);

      device.addEventListener('gattserverdisconnected', onDisconnected);
      setDevice(device);
      setConnected(device.gatt.connected);
    });
  };

  const readManufacturername = () => {
    return this.device.gatt.getPrimaryService("device_information")
    .then(service => service.getCharacteristic("manufacturer_name_string"))
    .then(characteristic => characteristic.readValue());
  }

  const onDisconnected = () => {
    console.log('Device is disconnected.');
  }

  const connect = () => {
    if(!device){
      setDevice(null);
      setGattServer(null);
      console.log("Connect: No device selected");
      return "Device is not connected";
    }
    return device.gatt.connect().then((resp) => {
      setDevice(resp.device);
      setConnected(resp.connected);
      // console.log("Services: ", resp.getPrimaryService('generic_access'))
      setGattServer(resp);
      console.log("Connect: ", resp)
    });
  }

  const getSupportedProperties = (characteristic) => {
    let supportedProperties = [];
    for (const p in characteristic.properties) {
      if (characteristic.properties[p] === true) {
        supportedProperties.push(p.toUpperCase());
      }
    }
    return '[' + supportedProperties.join(', ') + ']';
  }

  const blufiServiceUUID = '0000ffff-0000-1000-8000-00805f9b34fb';
  const blufiWriteCharacteristicUUID = '0000ff01-0000-1000-8000-00805f9b34fb';
  const blufiNotifyCharacteristicUUID = '0000ff02-0000-1000-8000-00805f9b34fb';
  const listServices = () => {
    if(!device || !gattServer){
      setDevice(null);
      setGattServer(null);
      console.log("Connect: No device selected");
      return "Device is not connected";
    }
    // Note that we could also get all services that match a specific UUID by
    // passing it to getPrimaryServices().
    // return gattServer.getPrimaryServices()
    // return gattServer.getPrimaryService('generic_access')
    return gattServer.getPrimaryService(blufiServiceUUID)
      .then(service => {
        console.log(service)

        service.getCharacteristics().then(characteristics => {
          console.log('> Service: ' + service.uuid);
          characteristics.forEach(characteristic => {
            console.log('>> Characteristic: ' + characteristic.uuid + ' ' +
                getSupportedProperties(characteristic));
          });
        });
        // let queue = Promise.resolve();

        // services.forEach(service => {
        //   console.log(service);
          // queue = queue.then(_ => service.getCharacteristics().then(characteristics => {
          //   console.log('> Service: ' + service.uuid);
          //   characteristics.forEach(characteristic => {
          //     console.log('>> Characteristic: ' + characteristic.uuid + ' ' +
          //         getSupportedProperties(characteristic));
          //   });
          // }));
        // });
    })
  }

  const disconnect = () => {
    if(!device){
      setDevice(null);
      setGattServer(null);
      console.log("Disconnect: No device selected");
      return "Device is no connected";
    }
    setConnected(false);
    return device.gatt.disconnect();
  }

  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        { device &&
        <p align="left">
          {isBLEAvaliable()}
           {console.log(device)}
           BLE Avaliable: {bleAvaliable ? "True" : "False"} <br />
           Device ID: {device.id} <br />
           Device Name: {device.name} <br />
           Connected: {connected ? "True" : "False"}
        </p>
        }
        <button onClick={bleScan} disabled={connected}>
          Select BLE Device
        </button>
        <button onClick={connect} disabled={connected || !device}>
          Connect BLE Device
        </button>
        <button onClick={listServices} disabled={!connected || !device}>
          List GATT Services
        </button>
        <button onClick={disconnect} disabled={!connected || !device}>
          Disconnect BLE Device
        </button>
      </header>
    </div>
  );
}

export default App;
